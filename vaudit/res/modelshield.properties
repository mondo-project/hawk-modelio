
CoreAudit.report.close   = Close
CoreAudit.report.message = The current operation would make the model inconsistent for the reasons detailed below.\nThe operation has been rolled back. The model is safe.
CoreAudit.report.title   = Model Shield Alert

ModelShield.CannotCreateDatabase = Unable to create a new namespace use cache:\n{0}\n\n{1}
ModelShield.NSUseBuildCanceled = Namespace use building cancelled. The namespace uses won't be available.
ModelShield.NSUseBuildCanceled.2 = The namespace use will be built on next project open. 
ModelShield.NSUseRebuildNeeded = The namespace use database cannot be open and will be rebuilt.\n({0})
ModelShield.NSUseBuildFailed = Namespace use building failed. The namespace uses won't be available.

NSUseUpdater.RebuildAll = Rebuild all namespace uses
NSUseUpdater.RebuildAll.GetBLToDelete = Getting all namespace uses to delete...
NSUseUpdater.RebuildAll.DeleteBL = Deleting {0} namespace uses ...
NSUseUpdater.RebuildAll.GettingAllObjects = Getting all model objects ...
NSUseUpdater.RebuildAll.ComputeBL = Computing namespace uses  ({1} / {0})  ...
NSUseUpdater.RebuildAll.Saving = Saving project ...

NsUseRepositoryChangeListener.Updating = Updating namespace uses ...
NsUseRepositoryChangeListener.UpdatingN = Updating namespace uses from {0} modified elements...
NsUseRepositoryChangeListener.UpdateFailed = The namespace uses update failed:\n{0}\n\nThe namespace uses are not consistent anymore with the model.\nYou may delete the data/localmodel directory to force building all namespace uses\n but this action may have consequences for other installed modules.
NsUseRepositoryChangeListener.Cleaning = cleaning obsolete namespace uses ...
NsUseRepositoryChangeListener.CleaningN = cleaning obsolete namespace uses  ({0} / {1})  ...

DefragLocalModelHandler.title = Defragmenting local model
DefragLocalModelHandler.task = Defragmenting local model repository...

E200.desc = The reach relationship must not be defined in an InternalTransition.
E200.what = The ''{0}'' internal transition's 'reach' relationship must not be defined.

E201.desc = A Parameter cannot simultaneously be an in/out Parameter and a return Parameter.
E201.what = The ''{0}'' parameter cannot simultaneously be an in/out parameter and a return parameter.

E202.desc = In a Transition, the 'Processing' relationship and the 'Effect' Attribute must not be defined at the same time.
E202.what = The ''{0}'' transition cannot simultaneously define the 'Processing' relationship with the ''{1}'' method, and the 'Effect' attribute with the ''{2}'' value.

E203.desc = In a Transition, the 'Trigger' relationship and the 'ReceivedEvents' Attribute must not be defined simultaneously.
E203.what = The ''{0}'' transition cannot simultaneously define the 'Trigger' relationship with the ''{1}'' event and the 'ReceivedEvents' attribute with the ''{2}'' value.

E204.desc = A StateMachine can belong to an Operation or any other NameSpace, except a DataType, a primitive Class or an Enumeration.
E204.what = The ''{0}'' state machine cannot belong to the ''{1}'' element. 

E205.desc = An element must belong to another element, with the exception of UML projects.
E205.what = The ''{0}'' element is an orphan: it has no container.

E206.desc = An Operation cannot redefine itself.
E206.what = The ''{0}'' operation must not redefine itself.

E207.desc = In a Transition, the 'Effects' relationship and the 'SentEvents' attribute must not be defined simultaneously.
E207.what = The ''{0}'' transition must not simultaneously define the 'Effects' relationship to the ''{1}'' signal and the 'SentEvents' attribute with the ''{2}'' value.

E208.desc = A UseCaseDependency must be stereotyped <<include>> or <<extend>>.
E208.what = The dependency between the ''{0}'' and ''{1}'' use cases is not stereotyped <<include>> or <<extend>>.

E209.desc = The start relationship must not be defined inside an InternalTransition.
E209.what = The ''{0}'' internal transition's start relationship must not be defined.

E210.desc = An Association must have at least two AssociationEnds.
E210.what = The ''{0}'' association has {3} roles instead of two.

E211.desc = An association must respect the following rules:<ul><li>An AssociationEnd must be linked to an Association.\n\
<li>For navigable roles: only current role source and target must be filled.\n\
<li>For opposite roles: only opposite source and target must be filled.\n\
<li>For associations navigable from both sides: current role source must be equals to opposite target as well as current target and opposite source.\n\
<li>For non navigable associations: both roles source must be filled, but no target.</ul>
E211.what = The ''{1}'' role association is invalid, see other errors for detail.

E211.THISSIDE.SOURCE.desc = A navigable role must have a source.
E211.THISSIDE.SOURCE.what = {1} role has no source.
E211.THISSIDE.TARGET.desc = A navigable role must have a target.
E211.THISSIDE.TARGET.what = {1} role has no target.
E211.THISSIDE.OPPSOURCE.desc = Opposite role of a navigable role must have no source.
E211.THISSIDE.OPPSOURCE.what = {2} Opposite role of {1} has a source : {3}
E211.THISSIDE.OPPTARGET.desc = Opposite role of a navigable role must have no target.
E211.THISSIDE.OPPTARGET.what = {2} Opposite role of {1} has a target : {3}

E211.OTHERSIDE.SOURCE.desc = A non navigable role must not have a source.
E211.OTHERSIDE.SOURCE.what = {1} non role has a source : {2} .
E211.OTHERSIDE.TARGET.desc = A non navigable role must not have a target.
E211.OTHERSIDE.TARGET.what = {1} role has a target : {2}.
E211.OTHERSIDE.OPPSOURCE.desc = Opposite role of a non navigable role must have a source.
E211.OTHERSIDE.OPPSOURCE.what = {2} Opposite role of {1} has no source.
E211.OTHERSIDE.OPPTARGET.desc = Opposite role of a non navigable role must have a target.
E211.OTHERSIDE.OPPTARGET.what = {2} Opposite role of {1} has no target.

# both sides: current source must be equals to opposite target as well as current target and opposite source
E211.BOTHSIDES.SOURCE.desc = A role navigable from both sides must have a source.
E211.BOTHSIDES.SOURCE.what = {1} role has no source.
E211.BOTHSIDES.TARGET.desc = A role navigable from both sides must  have a target.
E211.BOTHSIDES.TARGET.what = {1} role has no target.
E211.BOTHSIDES.SOURCE_EQ_OPPTARGET.desc = The source of a role navigable from both sides must be the same as the opposite role target.
E211.BOTHSIDES.SOURCE_EQ_OPPTARGET.what = Source of {1} role is not same as {2} target. <ul><li> {1} source : {3}\n <li> {2} target : {4}</ul>
E211.BOTHSIDES.TARGET_EQ_OPPSOURCE.desc = The target of a role navigable from both sides must be the same as the opposite role source.
E211.BOTHSIDES.TARGET_EQ_OPPSOURCE.what = Target of {1} role is not same as {2} source. <ul><li> {1} target : {3}\n <li> {2} source : {4}</ul>

# no side: both sources must be filled, but no target
E211.THISSIDE.SOURCE.desc = Roles of a non navigable association must have a source.
E211.THISSIDE.SOURCE.what = {1} role has no source.
E211.THISSIDE.TARGET.desc = Roles of a non navigable association must have no target.
E211.THISSIDE.TARGET.what = {1} role has a target : {2}
E211.THISSIDE.OPPSOURCE.desc = Opposite Role of a non navigable association must have a source.
E211.THISSIDE.OPPSOURCE.what = {2} Opposite role of {1} has no source
E211.THISSIDE.OPPTARGET.desc = Opposite role of a non navigable association must have no target.
E211.THISSIDE.OPPTARGET.what = {2} Opposite role of {1} has a target : {3}


E212.desc = A ClassAssociation must be linked to a Class.
E212.what = An association class located on the ''{1}'' association is not linked to a class.

E213.desc = An ElementImport must be directed towards a NameSpace.
E213.what = An element import belonging to ''{1}'' is not directed towards a name space.

E214.desc = A Generalization must be linked to a NameSpace.
E214.what = A generalization belonging to ''{1}'' is not linked to a name space.

E215.desc = An InterfaceRealization must be directed towards an Interface.
E215.what = An interface realization belonging to ''{1}'' is not directed towards an interface.

E216.desc = A Link must have at least two instantiated roles.
E216.what = The ''{0}'' link does not have at least two instantiated roles.

E217.desc = A LinkEnd must be linked to a Link.
E217.what = The ''{0}'' link end is not linked to a link.

E218.desc = An AnalystProject must have one root dictionary.
E218.what = The ''{0}'' analyst project has no root dictionary.

E219.desc = An AnalystProject must have one root requirement container.
E219.what = The ''{0}'' analyst project has no root requirement container.

E220.desc = An AnalystProject must have one root goal container.
E220.what = The ''{0}'' analyst project has no root goal container.

E221.desc = An AnalystProject must have one root business rule container.
E221.what = The ''{0}'' analyst project has no root business rule container.

E222.desc = An AnalystProject must have one property container.
E222.what = The ''{0}'' analyst project has no property container.

E225.desc = A Note must have a NoteType.
E225.what = A note belonging to the ''{1}'' element does not have a note type.

E226.desc = A PackageImport must be directed towards a Package.
E226.what = A package import belonging to ''{1}'' is not directed towards a package.

E227.desc = A PackageMerge must be directed towards a Package.
E227.what = A package merge belonging to ''{1}'' is not directed towards a package.

E228.desc = A Project must be linked to a Package.
E228.what = The ''{0}'' project is not linked to a package.

E229.desc = A Property must have a PropertyType.
E229.what = The ''{0}'' property has no property type.

E230.desc = A PropertyTable must have a PropertyTableDefinition.
E230.what = A property table belonging to the ''{1}'' element has no definition.

E231.desc = A RaisedException must have a Classifier as its destination.
E231.what = A raised exception belonging to the ''{1}'' element has no destination.

E232.desc = A Message must be directed towards a MessageEnd.
E232.what = A message belonging to the ''{1}'' element is not directed towards an message end.

E233.desc = A StateMachine must have a root Region.
E233.what = The ''{0}'' state machine has no root region.

E234.desc = A TaggedValue must have a TagType.
E234.what = A tagged value belonging to the ''{1}'' element has no tagged value type.

E235.desc = A UseCaseDependency must be directed towards a UseCase.
E235.what = A use case dependency belonging to the ''{1}'' element is not directed towards a use case.

E236.desc = A Manifestation must be directed towards a ModelElement.
E236.what = A manifestation of the ''{1}'' element is not directed towards a model element.

E237.desc = An ExternDocument must have an ExternDocumentType.
E237.what = An ExternDocument belonging to the ''{1}'' element does not have an ExternDocumentType.

E238.desc = A CombinedFragment must have at least one InteractionOperand.
E238.what = The ''{0}'' combined fragment must have at least one interaction operand.

E239.desc = A Constraint cannot be applied to a Note.
E239.what = The ''{0}'' constraint cannot be applied to the ''{1}'' note.

E240.desc = The visibility of an ElementImport must be public or private.
E240.what = The element import between ''{0}'' ({1}) and ''{2}'' ({3}) must not be {4}.

E241.desc = A Manifestation cannot manifest itself.
E241.what = A manifestation of the ''{1}'' artifact must not use itself.

E242.desc = A Manifestation cannot manifest its Artifact.
E242.what = The ''{1}'' artifact must not manifest itself.

E243.desc = An AssociationEnd can belong to a Class, an Interface, a Component, an Actor, a DataType, a Node or a Signal.
E243.what = The ''{0}'' role cannot belong to the ''{1}'' {2}.

E244.desc = The visibility of a PackageImport must be public or private.
E244.what = The package import between ''{0}'' ({1}) and '2' ({3}) must not be {4}.

E245.desc = A BindableInstance cannot belong simultaneously to a Classifier, a Collaboration and an Instance.
E245.what = The ''{0}'' part can belong to only one of the following elements: ''{1}'', ''{2}'', ''{3}''.

E246.desc = An Association can link an Actor to a Class, an Interface, an Actor, a UseCase or a Component.
E246.what = The ''{0}'' role cannot link a {1} to a {2}.

E247.desc = A NameSpace cannot import itself.
E247.what = The ''{0}'' {1} cannot have an element import link towards itself.

E248.desc = A Usage link must have a destination.
E248.what = A Usage link from the ''{0}'' element ({1}) has no destination.

E249.desc = A BindableInstance can represent an Attribute, an AssociationEnd or a BindableInstance.
E249.what = The ''{0}'' part cannot represent the ''{1}'' {2}.

E250.desc = An artifact stereotyped <<ModelComponentArchive>> cannot manifest elements that belong to a deployed model component.
E250.what = The ''{0}'' Artifact cannot manifest the ''{1}'' element because it already belongs to a deployed model component.

E251.desc = A diagram cannot belong to another diagram.
E251.what = The ''{1}'' Diagram must not belong to a {0}.

E252.desc = An Attribute can be created in a Class, Enumeration, Actor, Interface, DataType, UseCase, Component, Node, AssociationEnd or Template Parameter
E252.what = The ''{0}'' attribute cannot be created in the ''{1}'' element ({2}).

E253.desc = A Collaboration can belong to a NameSpace or an Operation, but not to both.
E253.what = The ''{0}'' collaboration cannot simultaneously belong to a namespace and an operation.

E254.desc = An AcceptCallEventAction cannot have InputPins.
E254.what = The ''{0}'' element cannot have input pins.

E255.desc = An AcceptChangeEventAction cannot have InputPins.
E255.what = The ''{0}'' element cannot have input pins.

E256.desc = An AcceptSignalAction cannot have InputPins.
E256.what = The ''{0}'' element cannot have input pins.

E257.desc = An AcceptTimeEventAction cannot have InputPins.
E257.what = The ''{0}'' element cannot have input pins.

E258.desc = An ActivityGroup cannot belong to more than one Activity or group.
E258.what = The ''{0}'' group cannot belong to more than one Activity or group.

E259.desc = An ActivityNode cannot belong to more than one Activity, StructureNode, ActivityGroup or ConditionalClause.
E259.what = The ''{0}'' ActivityNode cannot belong to more than one Activity, StructureNode, ActivityGroup or ConditionalClause.

E260.desc = A Partition with isDimension = true cannot belong to another partition.
E260.what = The ''{0}'' partition with isDimension = true cannot belong to another partition.

E261.desc = A FinalNode cannot have outgoing edges.
E261.what = The ''{0}'' final node cannot have outgoing edges.

E262.desc = An InitialNode cannot have incoming edges.
E262.what = The ''{0}'' initial node cannot have incoming edges.

E263.desc = An interaction can be owned by an Actor, a Class, a Collaboration, a Component, an Interface, a Node, an Operation, a Package or a Use Case.
E263.what = The ''{0}'' interaction cannot be owned by the ''{1}'' element of type {2}. 

E264.desc = An ExecutionSpecification has to start and end on a single Lifeline.
E264.what = The ''{0}'' ExecutionSpecification cannot start and end on different Lifelines.

E265.desc = ConditionalNodes must not directly own ActivityNodes (contrary to other StructuredActivityNodes such as LoopNodes).
E265.what = The ''{0}'' conditional node cannot contain activity nodes.

E266.desc = A Partition cannot simultaneously have sub-Partitions and contain Nodes.
E266.what = The ''{0}'' partition has both sub-Partitions and children.

E267.desc = ExecutionSpecification.Start.LineNumber must be less than ExecutionSpecification.Finish.LineNumber.
E267.what = The ''{0}'' execution specification must have Start.LineNumber < Finish.LineNumber.

E268.desc = The LineNumber attribute on an InteractionFragment must always >= 1.
E268.what = The ''{0}'' interaction fragment has a line number equal to {1} but it should be greater than or equal to 1.

E269.desc = A message must not travel back in time: its ReceiveEvent.LineNumber must be >= SendEvent.LineNumber
E269.what = The ''{0}'' message travels back in time: it goes from the {2} time unit to the {1} time unit.

E270.desc = An ActivityEdge must have a source and a target.
E270.what = The ''{0}'' activity edge does not have a source and a target.

E271.desc = A Message must have a SendEvent and a ReceiveEvent.
E271.what = The ''{0}'' message does not have a SendEvent or a ReceiveEvent.

E272.desc = An InformationFlow must have an InformationSource and an InformationTarget.
E272.what = The ''{0}'' information flow has no information source or no information target.

E273.desc = An ExecutionSpecification must have Start and Finish occurrences.
E273.what = The ''{0}'' execution specification does not have a start or a finish occurrence.

E274.desc = The creation message end must be the first fragment on the lifeline it covers.
E274.what = The ''{0}'' creation message has at least one fragment before it.

E275.desc = A destruction message ends the Lifeline it destroys. There can be no fragments after it.
E275.what = At least one CombinedFragment was detected on the Lifeline after the ''{0}'' destruction message.

E276.desc = An activity diagram can only be defined on an activity.
E276.what = The ''{0}'' activity diagram is defined on {1}, which is a(n) {2}.

E277.desc = A sequence diagram can only be defined on an interaction.
E277.what = The ''{0}'' sequence diagram is defined on {1}, which is a(n) {2}.

E278.desc = A communication diagram can only be defined on a communication interaction.
E278.what = The ''{0}'' communication diagram is defined on {1}, which is a(n) {2}.

E279.desc = A state diagram can only be defined on a state machine.
E279.what = The ''{0}'' state diagram is defined on {1}, which is a(n) {2}.

E280.desc = A stereotype must not have cycles on its 'Parent' stereotype relation.
E280.what = The ''{0}'' stereotype is part of a cycle due to its 'Parent' relationship: {2}

E282.desc = A set of Dependencies should not create a cycle.
E282.what = The ''{0}'' dependency makes a cycle with previously existing Dependencies.

E283.desc = The Cluster, Owner, InternalOwner and OwnerTemplateParameter relationships are exclusive in an Instance.
E283.what = The ''{0}'' instance has {1} owners. It should only have one.

E284.desc = An ExecutionSpecification, ExecutionOccurrenceSpecification and StateInvariant must cover exactly one Lifeline.
E284.what = The ''{0}'' interaction fragment covers {1} lifelines.

E286.desc = InteractionOperand.EndLineNumber must be >= to all InteractionOperand.Fragment.getLastLine()
E286.what = The ''{0}'' interaction operand must have getLastLine() >= getFirstLine() of all its fragments.

E287.desc = InteractionFragment.getLastLine() must be always >= the InteractionFragment.getFirstLine()
E287.what = Incorrect first line and last line for the ''{0}'' interaction fragment: {1} >= {2}

E288.desc = A Gate on an InteractionUse must satisfy these conditions: Gate.OwnerUse.getFirstLine() < Gate.getFirstLine() < Gate.OwnerUse.getLastLine()
E288.what = Incorrect first line or last line for the ''{0}'' gate on the ''{1}'' interaction use: {2}  <  {3}  <  {4}.

E289.desc = A Gate on CombinedFragments must satisfy these conditions: Gate.OwnerFragment.getFirstLine() < Gate.getFirstLine() < Gate.OwnerFragment.getLastLine()
E289.what = Incorrect first line or last line for the ''{0}'' gate on the ''{1}'' combined fragment: {2}  <  {3}  <  {4}.

E290.desc = If the sending and receiving MessageEnds are on the same Lifeline, the sending MessageEnd must have a LineNumber less than or equal to the receiving MessageEnd. 
E290.what = The ''{0}'' message must have SendEvent.LineNumber <= ReceiveEvent.LineNumber but {1} <= {2}.

E291.desc = Analyst elements must be of the same type as their composition owner.
E291.what = The type of ''{0}'' is not compatible with the type of its parent.

E292.desc = AnalystItems must have an AnalystPropertyTable.
E292.what = ''{0}'' has no AnalystPropertyTable.

R111.desc = An element's stereotype must be compatible with the element's metaclass.
R111.what = The ''{2}'' stereotype cannot be applied to a ''{1}'' type element.

R113b.desc = The NameSpace name must not conflict with a predefined type.
R113b.what = The name of ''{0}'' ({1}) conflicts with the predefined type ''{2}''.

R142.desc = A Package belongs to a Package, a Component, a Project or a TemplateParameter.
R142.what = The ''{1}'' package must not belong to a {0}.

R153.desc = A Parameter's type must be a Class, an Interface, a DataType or an Enumeration.
R153.what = The ''{0}'' parameter cannot be typed by the ''{1}'' {2}.

R158.desc = A Signal belongs to a Class, a Package, a TemplateParameter or a Component.
R158.what = The ''{0}'' signal cannot belong to a {1} type element.

R188.desc = An element cannot own itself.
R188.what = The ''{0}'' {1} must not be owned by itself.

R192.desc = A Collaboration must belong to a Package, a Class, a Component, an Interface, a UseCase, a Signal, an Actor, an Operation or a TemplateParameter.
R192.what = The ''{0}'' collaboration must not belong to {1}.

R194.desc = A Note's type must be compatible with the annotated element.
R194.what = The ''{2}'' note type cannot be applied to a {1}.

R197.desc = A TaggedValue's type must be compatible with the annotated element.
R197.what = The ''{2}'' tagged value type cannot be applied to a {1}.

R207.desc = An Actor belongs to a Package, a Class, a Component or an Interface.
R207.what = The ''{0}'' actor must not belong to ''{1}'' ({2}).

R221-20.desc = A PropertyValue must have a Property.
R221-20.what = A property value belonging to the ''{2}'' element has no property.

R221-28.desc = A TemplateParameterSubstitution must reference a TemplateParameter.
R221-28.what = A template parameter substitution belonging to the ''{2}'' element does not reference a template parameter.

R233.desc = An Operation can only raise Class, Interface, Enumeration or DataType type exceptions.
R233.what = The ''{0}'' operation cannot raise the ''{2}'' exception ({3}).

R236.desc = If the 'Owner' relationship of a BindableInstance has been defined, it can only be directed to a Collaboration.
R236.what = The ''{0}'' part cannot belong to the ''{1}'' {2}.

R250.desc = A CollaborationUse can only belong to an element of one of the following types: Class, Actor, UseCase, Signal, Node, Collaboration or Component.
R250.what = The ''{0}'' {1} cannot belong to the ''{2}'' {3}.

R254.desc = An Artifact belongs to a Package, a Component, an Artifact or a TemplateParameter.
R254.what = The ''{1}'' artifact must not belong to a {0}.

R255.desc = A Node belongs to a Package, a Component, a Node or a TemplateParameter.
R255.what = The ''{1}'' node must not belong to a {0}.

R277.desc = A ConnectorEnd can represent an Attribute, an AssociationEnd or a LinkEnd.
R277.what = The ''{0}'' connector end cannot represent the ''{1}'' {2}.

R278.desc = A Connector can represent an Attribute, an Association or a Link.
R278.what = The ''{0}'' connector link cannot represent the ''{1}'' {2}.

R280.desc = A BindableInstance cannot belong to an Interface.
R280.what = The ''{0}'' part cannot belong to the ''{1}'' {2}.

R282.desc = A TemplateParameter must be linked to its NameSpace by the Parameterized relationship instead of the Owner relationship.
R282.what = The ''{0}'' template parameter must not be linked to ''{1}'' by the Owner relationship.

R283.desc = Deployed modules must all have a different name. 
R283.what = The project contains {0} modules with the same ''{1}'' name.

R284.desc = A Component must belong to a Class, a Package, a TemplateParameter or a Component.
R284.what = The Component ''{0}'' must not belong to {1}.

R288.desc = An Interface belongs to a Package, a Component, a Class or an Interface.
R288.what = The ''{1}'' Interface must not belong to a {0}.

R289.desc = A TemplateParameter belongs to a Package, a Collaboration, a Component, a Node, a UseCase, a Signal, a Class, an Interface, an Enumeration, a DataType or an Artifact.
R289.what = The ''{1}'' TemplateParameter must not belong to a {0}.

R291.desc = A TemplateBinding belongs to a Package, a Collaboration, a Component, a Node, a UseCase, a Signal, a Class, an Interface, an Enumeration, a DataType or an Artifact.
R291.what = The ''{1}'' TemplateBinding must not belong to a {0}.

E293.desc = An AssociationEnd must have an opposite role.
E293.what = The ''{1}'' association role has no opposite role.

R38.desc = An Attribute can be typed by a Class, an Interface, a DataType or a primitive type.
R38.what = The ''{0}'' attribute cannot be typed by ''{1}'' ({2}).

R44.desc = A Class must belong to a Class, an Interface, a Package, a TemplateParameter or a Component.
R44.what = The ''{0}'' class must not belong to a {1}.

R61017.desc = In a group, neither sub-groups nor parent groups can contain crossing nodes or flows.
R61017.what = The ''{0}'' element is held in both ''{1}'' and its sub-group ''{2}''.

R69.desc = A DataType must belong to a Package, a Component, a Class, an Enumeration, an Interface or a Signal.
R69.what = The ''{0}'' datatype cannot belong to the ''{1}'' {2}.

R70001.desc = There must be only one module named LocalModule in the project.
R70001.what = The project must contain only one module named LocalModule.

R70003.desc = The different Analyst domains cannot be mixed.\nAn element from the Requirement domain can only belong to a Requirement Container, an element from the Goal domain can only belong to a Goal Container, an element from the Business Rules domain can only belong to a Business Rules Container and an element from the Dictionary domain can only belong to a Dictionary.
R70003.what = The ''{0}'' Analyst element was moved into the ''{1}'' container which is from a different Analyst domain.

R70005.desc = There must be no cycles in the composition graph.
R70005.what = Cycle detected in the composition graph of ''{0}''.

R72.desc = An Enumeration must belong to a Package, a Class, a Component, an Interface, a TemplateParameter, an Enumeration or a Signal.
R72.what = The ''{0}'' enumeration cannot belong to a {1}.

R9000.desc = A relationship from an Element must not reference another Element several times.
R9000.what = The ''{0}'' {1} references the ''{2}'' {3} through the ''{4}'' relationship several times.

R99.desc = An Interface can only be implemented by a Class, an Enumeration or a Component.
R99.what = The ''{0}'' interface cannot be implemented by the ''{2}'' {3}.



