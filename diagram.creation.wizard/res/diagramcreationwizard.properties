CreationWizard.Activity.Details                     = Activity diagrams are used to represent business processes, or the dynamic part of a model (algorithm of an operation, for example).\nThey can be "autonomous" (inside a package) and represent a process, or the behavior of an operation (inside an operation).\nCreation wizards, using the drag & drop feature, allow to create object nodes (dragging classes), call operations (dragging operations), sub process calls (dragging activities).
CreationWizard.Activity.Information                 = Create an Activity diagram 
CreationWizard.Activity.Name                        = Activity diagram
CreationWizard.BpmnProcessCollaboration.Details     = Bpmn Process Collaboration diagrams are dedicated to modeling business process, using BPMN, which is the most frequently used notation for this.\nA process is structured inside packages, and process diagrams are attached to processes.\nIn Modelio, BPMN is integrated with UML, which means that through the drag & drop feature or through referencing, data objects can be associated with UML classes, pools and lanes associated with UML elements (classes, packages, actors, ...), and operations, activities or processes associated with BPMN "call activity" tasks.
CreationWizard.BpmnProcessCollaboration.Information = Create a Bpmn Process Collaboration diagram 
CreationWizard.BpmnProcessCollaboration.Name        = Bpmn Process Collaboration diagram
CreationWizard.BpmnSubProcess.Details               = Bpmn Sub-Process diagrams model business processes at BPMN sub-process level.
CreationWizard.BpmnSubProcess.Information           = Create a Bpmn Sub-Process diagram
CreationWizard.BpmnSubProcess.Name                  = Bpmn Sub-Process diagram
CreationWizard.Class.Details                        = Class diagrams are the most commonly used diagrams in UML.\nIn analysis, they model the notions of a domain or those supported by a system, with their relationships and properties.\nIn design/development, they model the constituants of a system, or technical classes (Java, C#, ...) or data (SQL data schemas, ...).
CreationWizard.Class.Information                    = Create a Class diagram
CreationWizard.Class.Name                           = Class diagram
CreationWizard.Communication.Details                = Communication diagrams are used to illustrate architecture and its functioning principles, by presenting, for example, which associations are used to transmit certain messages between different elements.\nThey partially cover the capacities provided by sequence diagrams, but are less relevant when detailing event sequences and messages occurring between several participants.\nThey are most often created in collaborations, operations or internal class structures to describe the principles of the dynamic.
CreationWizard.Communication.Information            = Create a Communication diagram
CreationWizard.Communication.Name                   = Communication diagram
CreationWizard.Composite.Details                    = Composite Structure diagrams depict the internal structure of a classifier, as well as the internal details of a collaboration.\nThere you can define connection details between parts, show which port connects to which other one, insert collaboration uses within collaboration, etc.\nThis kind of diagram is used at a fine level of detail, to express how occurrences (parts) are related and connected.
CreationWizard.Composite.Information                = Create a Composite Structure diagram
CreationWizard.Composite.Name                       = Composite Structure diagram
CreationWizard.Deployment.Details                   = Deployment diagrams are used to represent the physical architecture of a system using nodes and connections between these nodes.\nTip: to model the deployment of elements in a node, create parts typed by these elements in the node. You can then drag and drop these elements into the node (for example, class, component, ...).
CreationWizard.Deployment.Information               = Create a Deployment diagram
CreationWizard.Deployment.Name                      = Deployment diagram
CreationWizard.Object.Details                       = Objects diagrams are used to provide instance models of classifiers (classes, components, etc.).\nThey can be created in the context of a classifier (internal structure of a class) or collaboration, and also under a package.\nYou can create an instance model to represent existing instances, and then abstract them as classes. You can also illustrate a class model by providing a typical instance configuration: in that case classes and attributes pre-exist to instances.\nUnder a classifier, the object diagram represents parts of the classifier : generally, composite diagrams which show ports and connectors are preferred in this case.
CreationWizard.Object.Information                   = Create an Object diagram
CreationWizard.Object.Name                          = Object diagram
CreationWizard.Sequence.Details                     = Sequence diagrams describe the sequence of the exchange of messages between several participants (instances, parts, ...).\nThey are used to illustrate a dynamic sequence, to model a protocol, to model tests, to trace an execution, to present a scenario of a use case.\nParticipants can be created by dragging and dropping classes, actors, ...\nThe sending of messages can be connected to the operations of the participants.\nSequence diagrams are typically created in a use case, an operation or a collaboration.
CreationWizard.Sequence.Information                 = Create a Sequence diagram
CreationWizard.Sequence.Name                        = Sequence diagram
CreationWizard.State.Details                        = State Machine diagrams are a powerful dynamic formalization mechanism used to express several aspects of a class.\nCreated inside a class, they describe the reaction to events according to their current state.\nThey can also describe the usage protocol of a class. 
CreationWizard.State.Information                    = Create a State Machine diagram
CreationWizard.State.Name                           = State Machine diagram
CreationWizard.UseCase.Details                      = Use Case diagrams are used to model the interactions between actors and a system.\nUse case diagrams show which actors communicate with which use cases, and the links between use cases (include, extend, ...).\nUse cases can be documented using predefined notes (pre and post conditions, description, exception). 
CreationWizard.UseCase.Information                  = Create a Use Case diagram
CreationWizard.UseCase.Name                         = Use Case diagram

Ui.DiagramCreationWizard.Context                    = Owner
Ui.DiagramCreationWizard.Description                = Description
Ui.DiagramCreationWizard.HideInvalid                = Show only applicable diagrams
Ui.DiagramCreationWizard.Message                    = Create a diagram
Ui.DiagramCreationWizard.More                       = More
Ui.DiagramCreationWizard.Name                       = Name
Ui.DiagramCreationWizard.ShellTitle                 = Diagram creation wizard
Ui.DiagramCreationWizard.Title                      = Diagram creation wizard